# Lab 4

## Django and Flask

### Instructions:
- Go to the GitHub repository and review lesson 4.
- Install Django & Django REST framework. Use the default database (SQLite).
- Start Django project "stevens", run server, and view app.
- Start Django REST project "mycpu", run server, and view app.
- Install Flask if no module named 'flask'.
- Run Flask server via hello_world.py and view app.
- Document results to your GitHub repository.

---

## Installing Django and Django REST framework
> Used install pip commands to install django, djangorestframework, requests, markdown, and django-filter.

## Creating and Running stevens Project Server
> Used command django-admin startproject stevens to create a new django project called stevens.
> Then used python3 manage.py runserver to start the server.
> I could view a successful server start at: http://127.0.0.1:8000

## Creating and Running mycpu Project Server
> Used command django-admin startproject mycpu to create a new django project called my cpu.
> Then used python3 manage.py runserver to start the server.
> Could view server at the same address: http://127.0.0.1:8000


## Adding RestFramework and Database Migrations
> Used command nano mycpu/settings.py to open the settings within the django project.
> Added rest_framework at the end of Installed Apps.
> Used command python3 manage.py migrate.

## Running Flask Server
> Used command nano helloworld.py to open nano text editor called hello world.
> Then imported Flask and created flask server.
> then used command python3 hello_world.py to start the server which could be seen at http://127.0.0.1:5000.

## Conclusion
In this lab I created and ran Django and Flask web applications. 
I set up and installed necessary packages, configured Django REST framework, and launched servers locally.
This lab strengthened my understanding of basic web frameworks and project setup in Python.
> I pledge my honor that I have abided by the Stevens Honor System.
